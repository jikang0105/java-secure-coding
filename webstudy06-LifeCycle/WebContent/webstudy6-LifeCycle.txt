** Servlet LifeCycle**

	- Servlet 계층구조 ( Servlet Hierarchy )
	
	<<interface>>
	Servlet : 모든 서블릿과 jsp가 하위로 implements 해야하는  java web program의 최상위 인터페이스이다.
			    주요 추상메서드(abstract method)에는 init(), service(request, response), destroy()가 있다.
			  
	<<abstract>>
	GenericServlet : 프로토콜에 독립적인 클래스로 service() 메서드(abstract method)를 제외한 서버프로그램을 구현하는데
					  유용한 메서드들을 하위(자식) 클래스에게 제공한다.
					 ( 대표적인 메서드로는 init(), service(request, response)등이 있다 )
					 
	<<absrtact>>
	HttpServlet : 부모인 GenericServlet을 상속받고 있으며 Http Protocol에 의거한 서비스를 실행하는데 유용한 기능을 내장하고 있다.
				    일반적으로 java web programming을 위한 프로그램(Servlet, jsp)을 만들 때 상속받는 클래스이다.
				  ( 대표적인 메서드에는 service(request, response), doGet(request, response),
				   doPost(request, response)등이 있다. )
				      
				  // 아래 메서드는 웹컨테이너에 의해 호출되는 메서드이다.
				  // 이 메서드는 내부적으로 HttpServletRequest와 HttpServletResponse 객체를 생성해서 오버로딩된
				  // protected service 메서드를 dispatch(처리해 보낸다)한다    
				  public void service(ServletRequest request, ServletResponse response){}
				  
				  // 클라이언트의 request method(요청방식)에 의거해 내부적으로 
				  // doGet() or doPost() or doPut() or doDelete()등으로 분기해 dispatch한다
				  protected void service(HttpServletRequest request, HttpServletResponse){}   
				  
	MyServlet( 개발자들이 만드는 서블릿 )
				extends HttpServlet한 후
				doGet(request, response){}
				or
				doPost(request,response){}를 오버라이딩 한다. 
				
	인터페이스 ( interface )
	*Collection Framework, JDBC, Servlet 등의 응용기술이 인터페이스를 계층구조상의 최상위에 두는 이유*
	- 인터페이스( interface )와 구현클래스( implementation )를 구분해서 설계하면 결합도를 낮추어 유지보수성을 향상시킨다.
	- 인터페이스란 사용하는 측 ( 일반 사용자 or 프로그램 or 웹컨테이너 등 ) 과 구현하는 측 ( 우리가 구현하는 서블릿 )과의 약속( 메세지 방식 ) 이다.
	- 구현부가 변경되어도 사용하는 측에서는 사용법이 변경되지 않는다 ( 낮은 결합도 ) -> 낮은 결합도로 유지보수성이 향상된다.
	- 인터페이스 사용법만 알면 구현체( 구현부 )를 몰라도 사용할 수 있다. -> 사용자 편의성 또는 생산성이 향상된다.( 업무 분담을 통한 신속한 개발이 가능하다. ) 
	
	interface를 implements 하는 하위 클래스들은 interface에서 명시한 abstract method를 반드시 구현해야한다.
	( 만약 구현하지 않으면 자신도 abstract class로 선언되어야 한다.)
		-> 표준화 ( 메세지 방식의 표준화를 의미한다. )
			상위 인터페이스만 보고 사용이 가능하다. ( ex - 유투브, cdplayer 등....)
			( ex - Collection interface만 이해하면 Set, List 계열의 자료구조체를 사용할 수 있다. )
			
	*abstract class를 사용하는 이유*
	- 인터페이스와는 다르게 인스턴스 변수와 구현된 메서드(알고리즘)를 하위 클래스에게 제공한다.
		-> 재사용성 측면에서 장점을 가진다. ( 그러나 인터페이스는 다양한 계층구조를 형성할 수 있다, 자바는 단일 상속의 특징을 가진다. )
	참고) Encapsulation, Inheritance, Polymorphism ( 객체지향의 주요개념 )
	
	
	*** Servlet LifeCycle ***
	서블릿 생명주기의 주요 메서드로는 Servlet interface의 init(), service(), destroy()가 있다.
	Servlet LifeCycle은 Web Container( or Servlet Container or WAS ) 가 담당한다.
	
	
	init(ServletConfig config) : 해당 서블릿의 초기화 작업을 위해 정의한다.
									서블릿당 한 번 실행된다.
									
	service(request, response) : 해당 서블릿이 사용자에게 서비스하기위해 정의한다
									doGet(), doPost()와 연결되어있다.
									클라이언트가 요청할 때마다 호출된다.
									
	destroy() : 해당 서블릿이 메모리에서 해제되기 직전에 한 번 호출한다.
	
	-----------------------------------------------------------------------------------------
						WAS
	browser				 |
	 -----  request 	 |
	 +   +  ------>		 + ----- is loaded? --- no ---> class loading
	 +   +	   			 |			|						|	
	 +   +				 |			|					     객체생성
	 +   +				 |			|						|
	 +   +				 |			|					  init(ServletConfig) - call - init()
	 +   +				 |			|						|
	 +   +				 |		   yes ----------------> service(request, response) --- doGet() or doPost()
	 -----				 --------------------------------	
	 	
	-----------------------------------------------------------------------------------------
	
	
				
	예) FindProductServlet에 접속해서 상품을 검새하는 사용자 요청이 1000이 들어왔다면
		FindProductServlet의 객체 생성(웹컨테이너가 생성)은 1번,
		init()은 1 번, service() -> doGet() 1000번
		
	서블릿 JSP는 스레드 기반으로 동작하기 때문에 해당 서블릿 객체를 한번 생성하고 서비스할때에는 한 번 만든 서블릿 객체를 이용해 서비스 한다.
	service() 계열 메서드를 실행시킬 스레드만 다수 생성되어 실행된다.