**18day 주요목차**
- Thread 개념
- Thread 생성방법
- Thread 실행 및 흐름제어
- synchronized (동기화)

------------------------------

- Thread 개념
	프로세스 내의 세부적 실행단위 ( 사전적 의미는 실 )
	process 는 현재 실행중인 프로그램을 의미한다.
	다시 말하면 Thread는 현재 실행중인 프로그램의 세부적 실행단위를 의미한다.
	
	ex) 동영상 플레이어를 실행한다.
		-> 동영상 프로세스의 세부적 실행단위란 
			영상서비스, 음향서비스, 자막서비스 가 스레드로 동작된다.
	ex) 채팅 클라이언트 프로그램을 실행한다.
		-> 채팅 클라이언트 프로세스 내에 필수적 실행 단위는 두가지이다.
			동시에 서비스 되어야 하므로 멀티 스레드가 필요하다.
			1. 친구들의 메세지를 입력받는 스레드
			2. 친구들에게 메세지를 출력하는 스레드
	ex) 채팅 서버 프로그램을 실행한다
		-> 접속한 클라이언트에게 모두 서비스해야한다. : 서비스 내용은 동일하다.
			접속한 클라이언트의 수만큼 스ㅔㄹ드를 각각 만들어 서비스 해야 한다.
			1. 서비스하는 스레드 수는 다수
			2. 서비스를 표현하는 클래스는 하나( implements Runnable or extends Thread )
			
	ex) BC카드 콜센터에 여로 고객이 동시에 상담한다 -> 콜센터 프로세스
		콜센터 직원 스레드가 고객당 생성되어 동시에 상담 서비스를 진행한다
		-> 콜센터 직원 스레드		
- Thread 생성 방법
	1) extends Thread
	2) implements Runnable : 자바는 단일 상속이므로, 다중 구현(다양한 계층구조형성)이
							  가능한 2번 방법으로 스레드를 생성하는 것을 더 선호한다.
	
	코드 예)
	// 스레드 작업내용을 정의하는 클래스
	public class InputWorker implements Runnable{
			// Runnable interface의 abstract method를 구현한다
			public void run(){
				// 스레드 실행내용
			}
	}
	---------------------------------
	위의 클래스를 이용해서 스레드를 생성하는 코드
	
	InputWorker worker = new InputWorker();
	Thread thread = new Thread(worker);
	thread.start(); // 해당 스레드를 실행가능상태로 보내고 jvm이 스케줄링을 하면 run()실행
								  
- Thread 실행 및 흐름 제어
	start() : 스레드를 실행 가능 상태로 보낸다. jvm이 이후 스케줄링을 해서 선택될 경우 
			실행상태로 전이된다.
	run() : 스레드의 실행 내용을 정의하는 영역, jvm에 의해 스케줄링을 받으면 run()가 실행되고
			run() 메소드 실행이 마치면 Thread는 종료된다.
			
- Thread 스케줄링
	자바 스레드 스케줄링은 우선순위 방식을 채택한다. 
	스레드 우선순위(priority)는 가장 낮은 1부터 가장 높은 10까지 이며
	우선순위를 지정하지 않을경우 기본 우선순위인 5가 적용된다.
	Thread.NORM-PRIORITY : 5	기본 우선순위
	Thread.MIN_PRIORITY : 1		가장 낮은 우선순위
	Thread.MAX_PRIORITY : 10	가장 높은 우선순위
	
	우선순위에 따라 스케줄링 받을 가능성이 높아진다.
	각 시슷템 환경( CPU )에서 동시 처리 하는 스레드의 갯수는 제한되어있다.
	스레드의 수가 이 갯수를 넘어서는 경우에는 우선순위가 높은 스레드가 스케줄링의 우선권을 가진다.

	- Daemon Thread : 백그라운드에서 실행되는 스레드
						자신을 실행시킨 스레드가 종료되면 함께 종료된다.
						thread.setDaemon(true);
						ex) 워드 작업 프로그램 실행시 백그라운드에서 주기적으로 백업작업을 하도록
							구현하고 이 백업 스레드를 setDaemon(true)로 처리하면
							워드프로그램 종료시 함께 종료된다.
							
- java의 Thread는 멀티 스레딩시 데이터를 공유할 수 있는 장점이 있다.
	Runnable 계층구조의 객체를 하나 생성하고 이를 이용해 다수의 스레드를 생성하고 실행시
	한번 만든 객체의 자원을 공유해서 사용할 수 있다. -> 서버의 자원을 효율적으로 사용한다.
	
- synchronized(동기화)
	: 멀티 스레딩시 공유자원의 안정성을 위해 사용한다.
	여러 스레드는 데이터를 공유해 사용할 수 있고 이런 특징은 스레드 방식의 큰 장점이지만,
	주의해야할 사항이 있다. 공유자원의 데이터 조작시 발생할 수 있는 문제에 대비하기 위해
	데이터 조작영역을 단일 스레드 환경으로 만드는 synchronized가 필요하다.
	
	wait() : 특정 조건이 될 경우 현재 실행되는 스레드를 wait pool에 대기시킬 때 사용하는 메서드이다.
	notify() or notifyAll() : 특정조건이 될 경우 스레드가 wait pool을 벗어나 object lock pool 상태로
							보내는 메서드이다.
							참고) object lock pool이란 synchronized 처리된 영역에
								다른 스레드가 실행 중인 경우 대기하는 pool이다.
	