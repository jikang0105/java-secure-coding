**12일차 주요목차**
- interface
- java.util.Collection 중 Set, List

--------------------------------------------
 review 
객체지향의 주요개념
- Encapsulation : "public interace, private implementation"
				모듈을 인터페이스와 구현부로 분리해서 정의하고 인터페이스는 공개하고
				구현부는 내부에 감춘다.
				
- Inheritance : 부모 멤버를 물려받아 재사용하는 것을 통해 생산성의 향상을 추구한다.
				계층구조 형성을  통해 다형성 적용환경을 조성한다.
				
- Polymorphism : "One Interface, Multiple Implementation"
				  단일한 소통방식(메세지 방식)으로 다양한 객체들이 각자의 방식으로 동작하는 성질
				  
- static : 객체 생성없이 사용이 가능하며 class loading시에 메모리에 적재된다.
		  class member, 클래스명.static member
		  
- abstract : abstract class는 자식에게 멤버를 상속시키기 위해 존재한다
			-> 직접 객체화 될 수 없다.
			abstract method는 자식에게 구현을 강제한다.
			-> 스스로는 구현부를 가질 수 없다.
			
--------------------------------------------------------------------------------------

- Interface -> 인터페이스는 인터페이스를 사용하는 측과 인터페이스를 구현하는 측과의 약속이다.
	: 다중 상속의 장점을 가지기 위한 자바기술
	-> !!다양한!! 계층구조 형성을 통한 다형성 적용환경
		( 상속의 장점 중 위를 채택하고, 재사용성을 말하는 것은 아니다.
		재사용성 즉 부모 멤버를 물려받는 측면의 장점은 아니다.)
	자바는 단일 상속을 채택하고 있다. 이유는 다중 상속을 남발할 경우 객체 생성시 불필요하게 많은 정보를
	로딩할 수 있기 때문이다(생성자의 super()가 호출되면서 자신의 객체 생성시 상위의 모든 객체를 우선 생성한다.)
	
	특징 : 인터페이스는 abstract class와 같이 객체화 될 수 없다.(재사용성에 무게를 두고 있지 않으며, 
		다양한 계층구조 형성을 통한 다형성 적용이 목적이다.) abstract method와 static final 상수, jdk 1.8 이상에서는
		default method와 static method 만 가질 수 있다.
		즉, 객체의 멤버인 인스턴스 변수를 가질 수 없고 구현된 일반 메서드는 가질 수 없다.
		
	인터페이스 interface 특징
	  instance variable(객체의 멤버변수)를 가질 수 없다. static final 상수만 가질 수 있다. 
	  주로 추상메서드를 선언한다. 인터페이스끼리는 상속이 가능하다. -> 추상메서드를 상속한다.
	  인터페이스를 구현하는 클래스는 다수의 인터페이스를  구현할 수 있다. ( 다양한 계층구조 형성을 지원)
	  jdk 1.8 버전부터는 default 제어자 명시된 구현부가 있는 메서드를 가질 수 있다.
	  ( default method )가 추가된 이유는 확장성 ( or 유지보수성 )을 고려했기 때문이다)
	  또한, static method는 구현부를 가질 수 있다.
	  
	  abstract와 interface를 비교해보자
	  
	  공통점 = 계층구조형성을 통해서 다형성을 지원한다. / 사용자에게 단일한 메세지 방식을 지원할 수 있다.
	  		   객체생성이 될 수 없다. / 자식 또는 하위 클래스에게 구현을 강제할 수 있다.
	  
	  차이점 = abstract는 객체의 멤버(인스턴스변수, 메서드)를 가질 수 있고 이러한 속성과 기능을 자식에게
	  			물려줄 수 있다.(interface는 불가능하다) /
	  			interface는 다양한 계층구조형성을 지원한다.
	
					